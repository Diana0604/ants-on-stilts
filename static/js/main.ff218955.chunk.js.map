{"version":3,"sources":["pages/homepage/assets/logo.png","pages/homepage/assets/Andy.png","pages/homepage/assets/Diana.png","pages/homepage/assets/Eva.png","pages/homepage/assets/Lucy.png","pages/homepage/assets/Mischa.png","pages/homepage/assets/Paul.png","pages/homepage/assets/Qiu.png","components/rotating-header/rotating-header.component.jsx","components/cardlist/cardlist.component.jsx","pages/homepage/hompeage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","RotatingHeader","props","className","src","alt","CardList","elements","map","element","key","ants","andy","diana","eva","lucy","mischa","paul","qiu","HomePage","logo","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+OCU5BC,G,YANQ,SAACC,GAAD,OACnB,4BAAQC,UAAU,mBACd,yBAAKC,IAAKF,EAAME,IAAKD,UAAU,eAAeE,IAAKH,EAAMG,SCQlDC,G,MAVE,SAACJ,GAAD,OACf,yBAAKC,UAAY,YAEXD,EAAMK,SAASC,KAAI,SAAAC,GAAO,OAC1B,yBAAKC,IAAKD,EAAQC,IAAKN,IAAKK,EAAQL,IAAKC,IAAKI,EAAQJ,IAAKF,UAAU,mB,mICUvEQ,G,MAAO,CACT,CACID,IAAK,EACLN,IAAKQ,IACLP,IAAK,QAET,CACIK,IAAK,EACLN,IAAKS,IACLR,IAAK,SAET,CACIK,IAAK,EACLN,IAAKU,IACLT,IAAK,OAET,CACIK,IAAK,EACLN,IAAKW,IACLV,IAAK,QAET,CACIK,IAAK,EACLN,IAAKY,IACLX,IAAK,UAET,CACIK,IAAK,EACLN,IAAKa,IACLZ,IAAK,QAET,CACIK,IAAK,EACLN,IAAKc,IACLb,IAAK,SAWEc,EAPE,kBACb,yBAAKhB,UAAU,YACX,kBAAC,EAAD,CAAgBC,IAAKgB,IAAMf,IAAI,SAC/B,kBAAC,EAAD,CAAUE,SAAUI,MC3CbU,E,uKARX,OACE,6BACE,kBAAC,EAAD,W,GAJUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff218955.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0a43bb8f.png\";","module.exports = __webpack_public_path__ + \"static/media/Andy.4ada2d79.png\";","module.exports = __webpack_public_path__ + \"static/media/Diana.4d14b9bd.png\";","module.exports = __webpack_public_path__ + \"static/media/Eva.cc558588.png\";","module.exports = __webpack_public_path__ + \"static/media/Lucy.18436216.png\";","module.exports = __webpack_public_path__ + \"static/media/Mischa.9dbe500a.png\";","module.exports = __webpack_public_path__ + \"static/media/Paul.504fe1b5.png\";","module.exports = __webpack_public_path__ + \"static/media/Qiu.b1516001.png\";","import React from 'react';\n//styles\nimport './rotating-header.styles.scss'\n\nconst RotatingHeader = (props) => (\n    <header className=\"rotating-header\">\n        <img src={props.src} className=\"header-image\" alt={props.alt}/>\n    </header>\n);\n\nexport default RotatingHeader;","import React from 'react';\n//styles\nimport './cardlist.styles.scss';\n\nconst CardList = (props) => (\n  <div className = \"cardlist\">\n    {\n        props.elements.map(element => (\n        <img key={element.key} src={element.src} alt={element.alt} className=\"card-img\"></img>\n        ))\n    }\n  </div>  \n);\n\nexport default CardList;","import React from 'react';\n//components\nimport RotatingHeader from '../../components/rotating-header/rotating-header.component';\nimport CardList from '../../components/cardlist/cardlist.component';\n//logo\nimport logo from './assets/logo.png';\n//ants\nimport andy from './assets/Andy.png';\nimport diana from './assets/Diana.png';\nimport eva from './assets/Eva.png';\nimport lucy from './assets/Lucy.png';\nimport mischa from './assets/Mischa.png';\nimport paul from './assets/Paul.png';\nimport qiu from './assets/Qiu.png';\n//styles\nimport './homepage.styles.scss'\n\n//ants\nconst ants = [\n    {\n        key: 1,\n        src: andy,\n        alt: \"andy\"\n    },\n    {\n        key: 2,\n        src: diana,\n        alt: \"diana\"\n    },\n    {\n        key: 3,\n        src: eva,\n        alt: \"eva\"\n    },\n    {\n        key: 4,\n        src: lucy,\n        alt: \"lucy\"\n    },\n    {\n        key: 5,\n        src: mischa,\n        alt: \"mischa\"\n    },\n    {\n        key: 6,\n        src: paul,\n        alt: \"paul\"\n    },\n    {\n        key: 7,\n        src: qiu,\n        alt: \"qiu\"\n    }\n]\n\nconst HomePage = () => (    \n    <div className=\"homepage\">\n        <RotatingHeader src={logo} alt=\"logo\"></RotatingHeader>\n        <CardList elements={ants}></CardList>\n    </div>\n);\n\nexport default HomePage;","import React, {Component} from 'react';\n//import logo from './logo.png';\nimport './App.css';\n\nimport HomePage from './pages/homepage/hompeage.component';\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <HomePage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}